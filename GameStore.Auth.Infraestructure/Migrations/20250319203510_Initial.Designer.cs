// <auto-generated />
using System;
using GameStore.Auth.Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStore.Auth.Infraestructure.Migrations
{
    [DbContext(typeof(GameStoreAuthDbContext))]
    [Migration("20250319203510_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStore.Auth.Infraestructure.Entities.Privilege", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Privileges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Key = "AddGame"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Key = "DeleteGame"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Key = "ViewGames"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Key = "UpdateGame"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Key = "AddUser"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Key = "DeleteUser"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Key = "ViewUsers"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Key = "UpdateUser"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Key = "ViewRoles"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Key = "AddRole"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Key = "UpdateRole"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Key = "DeleteRole"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Key = "ViewGenres"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Key = "AddGenre"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Key = "UpdateGenre"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Key = "DeleteGenre"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            Key = "ViewPlatforms"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            Key = "AddPlatform"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            Key = "UpdatePlatform"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            Key = "DeletePlatform"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            Key = "ViewPublishers"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            Key = "AddPublisher"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            Key = "UpdatePublisher"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            Key = "DeletePublisher"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            Key = "BanUser"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            Key = "DeleteComment"
                        });
                });

            modelBuilder.Entity("GameStore.Auth.Infraestructure.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ParentRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            Name = "Manager",
                            NormalizedName = "MANAGER",
                            ParentRoleId = "00000000-0000-0000-0000-000000000010"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000030",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR",
                            ParentRoleId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000040",
                            Name = "User",
                            NormalizedName = "USER",
                            ParentRoleId = "00000000-0000-0000-0000-000000000030"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000050",
                            Name = "Guest",
                            NormalizedName = "GUEST",
                            ParentRoleId = "00000000-0000-0000-0000-000000000040"
                        });
                });

            modelBuilder.Entity("GameStore.Auth.Infraestructure.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BanExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36f6981d-9045-453c-8a3b-92b0a732c104",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDD11mhD6Uwd1+PYkxMJaQYpRKYVH7Gdcu5jucD3y6qH52KVwZjVrg4Phn5ySFH0zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0e73ef8-59bb-413e-85b6-2567feb30704",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "00000000-0000-0000-0000-000000000010"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrivilegeRoles", b =>
                {
                    b.Property<Guid>("PrivilegesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PrivilegesId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PrivilegeRoles");

                    b.HasData(
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RolesId = "00000000-0000-0000-0000-000000000010"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000011"),
                            RolesId = "00000000-0000-0000-0000-000000000010"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000012"),
                            RolesId = "00000000-0000-0000-0000-000000000010"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000013"),
                            RolesId = "00000000-0000-0000-0000-000000000010"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RolesId = "00000000-0000-0000-0000-000000000010"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RolesId = "00000000-0000-0000-0000-000000000010"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000009"),
                            RolesId = "00000000-0000-0000-0000-000000000010"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RolesId = "00000000-0000-0000-0000-000000000010"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000002"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000014"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000015"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000017"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000016"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000018"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000019"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000021"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000020"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000022"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000023"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000025"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000024"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000027"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000026"),
                            RolesId = "00000000-0000-0000-0000-000000000020"
                        },
                        new
                        {
                            PrivilegesId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RolesId = "00000000-0000-0000-0000-000000000050"
                        });
                });

            modelBuilder.Entity("GameStore.Auth.Infraestructure.Entities.Role", b =>
                {
                    b.HasOne("GameStore.Auth.Infraestructure.Entities.Role", "ParentRole")
                        .WithMany("ChildrenRoles")
                        .HasForeignKey("ParentRoleId");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("GameStore.Auth.Infraestructure.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GameStore.Auth.Infraestructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GameStore.Auth.Infraestructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("GameStore.Auth.Infraestructure.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Auth.Infraestructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GameStore.Auth.Infraestructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivilegeRoles", b =>
                {
                    b.HasOne("GameStore.Auth.Infraestructure.Entities.Privilege", null)
                        .WithMany()
                        .HasForeignKey("PrivilegesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Auth.Infraestructure.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameStore.Auth.Infraestructure.Entities.Role", b =>
                {
                    b.Navigation("ChildrenRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
