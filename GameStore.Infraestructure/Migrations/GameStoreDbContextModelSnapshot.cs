// <auto-generated />
using System;
using GameStore.Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStore.Infraestructure.Migrations
{
    [DbContext(typeof(GameStoreDbContext))]
    partial class GameStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "PlatformsId");

                    b.HasIndex("PlatformsId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStore.Core.Comment.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GameStore.Core.Game.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameStore.Core.Genre.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa5b32e0-0454-4b40-b8be-315e37a2472d"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("33c3aa39-f2af-4db6-97d3-bac8e8522c70"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("27d07018-67dc-4e50-948c-b6909c90dc0e"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("44dbc908-c605-46e2-a3f5-76f1a0b7c1e3"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("7ad20550-89c6-4712-bce7-c527f9c7fd40"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("f49cbf60-aa43-4dc8-b5ca-4aef3e7fb29e"),
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("a6c41986-dbd4-4b83-80d1-a3556d0d7c8d"),
                            Name = "RTS",
                            ParentGenreId = new Guid("fa5b32e0-0454-4b40-b8be-315e37a2472d")
                        },
                        new
                        {
                            Id = new Guid("fecf29a8-6846-49fa-b50e-85e77b2bb0d7"),
                            Name = "TBS",
                            ParentGenreId = new Guid("fa5b32e0-0454-4b40-b8be-315e37a2472d")
                        },
                        new
                        {
                            Id = new Guid("413cd798-8db5-4d4b-b3f5-87a85854bff0"),
                            Name = "Races",
                            ParentGenreId = new Guid("27d07018-67dc-4e50-948c-b6909c90dc0e")
                        },
                        new
                        {
                            Id = new Guid("a8ce7447-a040-4c80-9732-b846cb9d2c20"),
                            Name = "Rally",
                            ParentGenreId = new Guid("27d07018-67dc-4e50-948c-b6909c90dc0e")
                        },
                        new
                        {
                            Id = new Guid("be133d5d-2df2-42b5-9ef6-f07c88e328de"),
                            Name = "Formula",
                            ParentGenreId = new Guid("27d07018-67dc-4e50-948c-b6909c90dc0e")
                        },
                        new
                        {
                            Id = new Guid("a26a4f6e-edc1-4cf7-bd7f-185a30da90f9"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("27d07018-67dc-4e50-948c-b6909c90dc0e")
                        },
                        new
                        {
                            Id = new Guid("d273bf7a-f637-4300-a5f0-001100669245"),
                            Name = "FPS",
                            ParentGenreId = new Guid("44dbc908-c605-46e2-a3f5-76f1a0b7c1e3")
                        },
                        new
                        {
                            Id = new Guid("472f9f55-cc6d-4c26-8437-02bf4c7139e1"),
                            Name = "TPS",
                            ParentGenreId = new Guid("44dbc908-c605-46e2-a3f5-76f1a0b7c1e3")
                        });
                });

            modelBuilder.Entity("GameStore.Core.Platform.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2734aad6-04a2-4610-b4b7-a25413ee944b"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("da0d19d9-6db8-4dcd-b945-65a150cc19a6"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("3744c037-0bbb-47cc-aa1a-3a668c1d9ca8"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("a6724056-ff51-4a63-be8f-7b002a615d4f"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStore.Core.Publisher.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("GameStore.Core.Game.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Core.Genre.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.HasOne("GameStore.Core.Game.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Core.Platform.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameStore.Core.Comment.Comment", b =>
                {
                    b.HasOne("GameStore.Core.Game.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Core.Comment.Comment", "ParentComment")
                        .WithMany("ChildrenComments")
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("Game");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("GameStore.Core.Game.Game", b =>
                {
                    b.HasOne("GameStore.Core.Publisher.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStore.Core.Comment.Comment", b =>
                {
                    b.Navigation("ChildrenComments");
                });

            modelBuilder.Entity("GameStore.Core.Publisher.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
